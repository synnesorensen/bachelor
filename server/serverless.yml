service: myserver
useDotenv: true
 
frameworkVersion: '2'
 
plugins:
  - serverless-esbuild
  - serverless-offline
  - serverless-s3-sync
 
provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  region: eu-north-1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - "DynamoDB:*"
      Resource: "*"
  environment:
    VUE_APP_AWS_COGNITO_USER_POOL_ID: ${env:VUE_APP_AWS_COGNITO_USER_POOL_ID}
    VUE_APP_AWS_COGNITO_APP_CLIENT_ID: ${env:VUE_APP_AWS_COGNITO_APP_CLIENT_ID}
    TABLENAME: ${env:TABLENAME}
    BUCKETNAME: ${env:BUCKETNAME}

 
custom:
  esbuild:
    target: es2019
    tsconfig: ./tsconfig.json
    minify: false
    sourcemap: inline
 
  httpApi:
    payload: '1.0'

  s3Sync:
    - bucketName: ${env:BUCKETNAME}
      localDir: ../clients/webclient/dist
      deleteRemoved: true
      acl: public-read
      followSymlinks: true
      defaultContentType: text/html
      params:
        - index.html:
            CacheControl: 'no-cache'
        - "*.js":
            CacheControl: 'public, max-age=31536000'

functions:
  authorizer:
    handler: src/auth/authorizer.authorizer
  userprofile:
    handler: src/userprofile.mainHandler
    events:
      - http:
          authorizer: authorizer
          path: /userprofile
          method: any
          cors: true
  vendor:
    handler: src/vendor.mainHandler
    events:
      - http:
          authorizer: authorizer
          path: /vendor
          method: any
          cors: true
  subscription:
    handler: src/subscription.mainHandler
    events:
      - http:
          authorizer: authorizer
          path: /subscription
          method: get
          cors: true
  userSubscription:
    handler: src/userSubscription.mainHandler
    events:
      - http:
          authorizer: authorizer
          path: /u/subscription
          method: any
          cors: true
  vendorSubscription:
    handler: src/vendorSubscription.mainHandler
    events:
      - http:
          authorizer: authorizer
          path: /v/subscription
          method: post
          cors: true
  subscriptions:
    handler: src/usersAndSubscriptions.mainHandler
    events: 
      - http:
          authorizer: authorizer
          path: /v/usersAndSubscriptions
          method: get
          cors: true
  userDeliveries:
    handler: src/userDeliveries.mainHandler
    events: 
      - http: 
          authorizer: authorizer
          path: /u/deliveries
          method: get
          cors: true
  userDelivery:
    handler: src/userDelivery.mainHandler
    events:
      - http:
          authorizer: authorizer
          path: /u/delivery
          method: any
          cors: true
  vendorDelivery:
    handler: src/vendorDelivery.mainHandler
    events:
      - http:
          authorizer: authorizer
          path: /v/delivery
          method: any
          cors: true
  vendorDeliveries:
    handler: src/vendorDeliveries.mainHandler
    events:
      - http:
          authorizer: authorizer
          path: /v/deliveries
          method: any
          cors: true
  unpaidDeliveries:
    handler: src/unpaidDeliveries.mainHandler
    events:
      - http:
          authorizer: authorizer
          path: /unpaidDeliveries
          method: get
          cors: true
  deliveryDetails:
    handler: src/deliveryDetails.mainHandler
    events:
      - http:
          authorizer: authorizer
          path: /v/deliveryDetails
          method: get
          cors: true
  cancelDeliveries:
    handler: src/cancelDeliveries.mainHandler
    events:
      - http:
          authorizer: authorizer
          path: /cancelDeliveries
          method: post
          cors: true
  cancelledDeliveries:
    handler: src/cancelledDeliveries.mainHandler
    events:
      - http:
          authorizer: authorizer
          path: /cancelledDeliveries
          method: get
          cors: true
  scheduleToDates:
    handler: src/scheduleToDates.mainHandler
    events:
      - http:
          authorizer: authorizer
          path: /scheduleDates
          method: get
          cors: true
  deliveryRequests: 
    handler: src/deliveryRequests.mainHandler
    events: 
      - http: 
          authorizer: authorizer
          path: /v/deliveryRequests
          method: any
          cors: true
  newUsers: 
    handler: src/newUsers.mainHandler
    events: 
      - http: 
          authorizer: authorizer
          path: /v/newUsers
          method: get
          cors: true
  setAbsence: 
    handler: src/absence.mainHandler
    events: 
      - http: 
          authorizer: authorizer
          path: /v/absence
          method: any
          cors: true
  setUserAbsence: 
    handler: src/userAway.mainHandler
    events: 
      - http: 
          authorizer: authorizer
          path: /u/away
          method: any
          cors: true
  lastDeliveryDate: 
    handler: src/lastDelivery.mainHandler
    events: 
      - http: 
          authorizer: authorizer
          path: /lastDelivery
          method: get
          cors: true

resources:
  Resources:
    WebSiteBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${env:BUCKETNAME}
        AccessControl: PublicRead
        WebsiteConfiguration:
          IndexDocument: index.html
          ErrorDocument: error.html
    MainDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
          - AttributeName: sk
            AttributeType: S
          - AttributeName: GSI1_pk
            AttributeType: S
          - AttributeName: GSI1_sk
            AttributeType: S
          - AttributeName: GSI2_pk
            AttributeType: S
          - AttributeName: GSI2_sk
            AttributeType: S
          - AttributeName: GSI3_pk
            AttributeType: S
          - AttributeName: GSI3_sk
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
          - AttributeName: sk
            KeyType: RANGE
        TableName: ${env:TABLENAME}
        BillingMode: PAY_PER_REQUEST
        GlobalSecondaryIndexes: 
          - IndexName: GSI1
            KeySchema:
              - AttributeName: GSI1_pk
                KeyType: HASH
              - AttributeName: GSI1_sk
                KeyType: RANGE
            Projection:
              ProjectionType: "ALL"
          - IndexName: GSI2
            KeySchema:
              - AttributeName: GSI2_pk
                KeyType: HASH
              - AttributeName: GSI2_sk
                KeyType: RANGE
            Projection:
              ProjectionType: "ALL"
          - IndexName: GSI3
            KeySchema:
              - AttributeName: GSI3_pk
                KeyType: HASH
              - AttributeName: GSI3_sk
                KeyType: RANGE
            Projection:
              ProjectionType: "ALL"
    GatewayResponseDefault4XX:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: 'ApiGatewayRestApi'